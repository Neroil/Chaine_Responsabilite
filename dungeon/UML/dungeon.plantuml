@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Assets {
  + get(String): Texture
  + dispose(): void
}
class AttackHandler {
  + handleRequest(Request): boolean
  # handleAttackRequest(AttackRequest): boolean
}
class AttackItem {
  + pickUp(PlayerTile): void
}
class AttackRequest {
  - weaponLastAttack: long
  - weaponCooldown: int
  - weaponDamage: int
  - timeAttack: int
  - weaponCost: int
  - player: PlayerTile
  - attackType: AttackType
  + modifyWeaponCost(double): void
  + modifyWeaponDamage(double): void
   timeAttack: int
   attackType: AttackType
   weaponCooldown: int
   weaponCost: int
   weaponDamage: int
   player: PlayerTile
   weaponLastAttack: long
}
class Camera {
  ~ updateCameraPosition(CharacterTile, OrthographicCamera): void
}
class CharacterTile {
  - facingDirection: Vector2
  + reduceLife(int): void
  # requestDamage(Request): void
  + move(Vector2, SpatialHashMap): void
  + draw(SpriteBatch): void
  - isCollision(Vector2, SpatialHashMap): boolean
   facingDirection: Vector2
   alive: boolean
   position: Vector2
   HP: int
}
class Club {
  + handler(): Handler
}
class Constants
class CooldownHandler {
  # handleAttackRequest(AttackRequest): boolean
}
class CostModifierHandler {
  # handleAttackRequest(AttackRequest): boolean
}
class DamageHandler {
  + handleRequest(Request): boolean
  # handleDamageRequest(DamageRequest): boolean
}
class DamageModifierHandler {
  # handleAttackRequest(AttackRequest): boolean
}
class DamageNumber {
  + update(float): void
  + draw(SpriteBatch): void
   expired: boolean
}
class DamageRequest {
  - collidableEntities: LinkedList<CharacterTile>
  - positionsAttacked: LinkedList<Vector2>
  - targets: LinkedList<CharacterTile>
  - damage: int
  + modifyDamage(int): void
  + addTarget(CharacterTile): void
   targets: List<CharacterTile>
   damage: int
   collidableEntities: List<CharacterTile>
   positionsAttacked: List<Vector2>
}
class DamageRing {
  + handler(): Handler
}
class DefenseItem {
  + pickUp(PlayerTile): void
}
class EnemyTile {
  + attack(): void
  + move(SpatialHashMap): void
  - calculateDirection(): Vector2
   randomDirection: Vector2
   range: float
}
class Fist {
  + handler(): Handler
}
class Game {
  - player: PlayerTile
  - gameHUD: GameHUD
  - mapRenderer: OrthogonalTiledMapRenderer
  - step: int
  - isGameWon: boolean
  - inputHandler: InputHandler
  - items: LinkedList<ItemTile>
  - isGameOver: boolean
  - spatialHashMap: SpatialHashMap
  - generateExit(): void
  - generateItems(): void
  + initializeGame(): void
  + addDamageNumber(DamageNumber): void
  + exitLevel(): void
  - initializeCollisionDetection(): void
  + render(SpriteBatch): void
  + updateStep(): void
  + resetGame(): void
  + dispose(): void
  - generateEnemies(): void
   step: int
   isGameOver: boolean
   gameHUD: GameHUD
   isGameWon: boolean
   mapRenderer: OrthogonalTiledMapRenderer
   player: PlayerTile
   spatialHashMap: SpatialHashMap
   items: LinkedList<ItemTile>
   inputHandler: InputHandler
}
class GameHUD {
  - player: PlayerTile
  - renderItems(): void
  - drawItemInHorizontalLine(ItemTile, float, float): float
  - drawBar(Color, float, float, float, float): void
  - renderWeapon(): void
  + renderWinScreen(): void
  - renderEndTextScreen(String): void
  - renderBars(): void
  + dispose(): void
  + render(): void
  + renderLoseScreen(): void
   player: PlayerTile
}
class GdxDungeon {
  + create(): void
  + render(): void
  - updateCamera(): void
  + dispose(): void
}
class Handler {
  - successor: Handler
  + handleRequest(Request): boolean
  # invokeSuccessor(Request): boolean
   successor: Handler
}
class HitChanceHandler {
  # handleAttackRequest(AttackRequest): boolean
}
class HitHandler {
  # handleDamageRequest(DamageRequest): boolean
}
class InputHandler {
  + handleInput(CharacterTile, SpatialHashMap, float): void
}
class ItemTile {
  + handler(): Handler
  + pickUp(PlayerTile): void
}
class Ladder {
  + handler(): Handler
  + pickUp(PlayerTile): void
}
class MagicScepter {
  + handler(): Handler
}
class MagicalWeapon {
   attackType: AttackType
}
class ManaHandler {
  # updateResources(AttackRequest): void
  # checkResources(AttackRequest): boolean
}
class ManaRing {
  + handler(): Handler
}
class MapGenerator {
  - generateRooms(TiledMapTileLayer, int, int, int): void
  - getRandomDirection(Vector2, Vector2, Vector2): Vector2
  + clearMap(): void
  - connectRooms(TiledMapTileLayer): void
  + getWallTiles(TiledMapTileLayer): List<Rectangle>
  - carveRoom(TiledMapTileLayer, Rectangle): void
  - generateCorridorPath(Vector2, Vector2): List<Vector2>
  + initializeTextures(): void
  - setWallTileBasedOnDirection(TiledMapTileLayer, int, int): void
  + generateProceduralMap(int, int, int, TiledMap): void
  - createBaseLayer(int, int): TiledMapTileLayer
  - generateBackground(int, int): TiledMapTileLayer
  ~ isCellInsideAnyRoom(int, int): boolean
  - generateRandomRoom(int, int): Rectangle
  - carveCorridor(TiledMapTileLayer, int, int, int, int): void
  - carveCorridorBetweenRooms(TiledMapTileLayer, Rectangle, Rectangle): void
  + generateRandomPositionInRoom(): Vector2
   wallTiles: TiledMapTileLayer
}
class PhysicalWeapon {
   attackType: AttackType
}
class PlayerTile {
  - vigor: int
  - VIGOR_MAX: int
  - MANA_MAX: int
  - defenseItems: LinkedList<ItemTile>
  - attackItems: LinkedList<ItemTile>
  - mana: int
  - weapon: WeaponTile
  - createAttackChain(): void
  + reduceMana(int): void
  + addDefenseItem(ItemTile): void
  + attack(): void
  + exitLevel(): void
  + addAttackItem(ItemTile): void
  + move(Vector2, SpatialHashMap): void
  + reduceVigor(int): void
  + pickUpItem(ItemTile): void
  + reset(): void
  + updateRessources(): void
   VIGOR_MAX: int
   vigor: int
   weapon: WeaponTile
   defenseItems: LinkedList<ItemTile>
   MANA_MAX: int
   attackItems: LinkedList<ItemTile>
   mana: int
}
interface Request << interface >>
class RessourceHandler {
  # checkResources(AttackRequest): boolean
  # updateResources(AttackRequest): void
  # handleAttackRequest(AttackRequest): boolean
}
class SpatialHashMap {
  + insert(Rectangle): void
  + getPotentialColliders(Rectangle): Set<Rectangle>
  + clear(): void
  - addRectToCell(Rectangle, int, int): void
  - getMinCellY(float): int
  - getMinCellX(float): int
  - getMaxCellX(float): int
  - getMaxCellY(float): int
}
class SpriteTile {
  ~ texture: TextureRegion
  + snapToTileCenter(): void
  + draw(SpriteBatch): void
   boundingBox: Rectangle
   texture: TextureRegion
}
class Sword {
  + handler(): Handler
}
class TargetHandler {
  # handleDamageRequest(DamageRequest): boolean
}
class VigorHandler {
  # checkResources(AttackRequest): boolean
  # updateResources(AttackRequest): void
}
class VigorRing {
  + handler(): Handler
}
class WallCell {
  - tile: StaticTiledMapTile
   tile: StaticTiledMapTile
}
class WeaponTile {
  - lastAttack: int
  - damage: int
  - cooldown: int
  - range: int
  - cost: int
  + pickUp(PlayerTile): void
   range: int
   cooldown: int
   damage: int
   attackType: AttackType
   lastAttack: int
   cost: int
}

AttackHandler          -[#000082,plain]-^  Handler               
AttackItem             -[#000082,plain]-^  ItemTile              
AttackRequest          -[#008200,dashed]-^  Request               
CharacterTile          -[#000082,plain]-^  SpriteTile            
Club                   -[#000082,plain]-^  PhysicalWeapon        
CooldownHandler        -[#000082,plain]-^  AttackHandler         
CostModifierHandler    -[#000082,plain]-^  AttackHandler         
DamageHandler          -[#000082,plain]-^  Handler               
DamageModifierHandler  -[#000082,plain]-^  AttackHandler         
DamageRequest          -[#008200,dashed]-^  Request               
DamageRing             -[#000082,plain]-^  AttackItem            
DefenseItem            -[#000082,plain]-^  ItemTile              
EnemyTile              -[#000082,plain]-^  CharacterTile         
Fist                   -[#000082,plain]-^  PhysicalWeapon        
HitChanceHandler       -[#000082,plain]-^  AttackHandler         
HitHandler             -[#000082,plain]-^  DamageHandler         
ItemTile               -[#000082,plain]-^  SpriteTile            
Ladder                 -[#000082,plain]-^  ItemTile              
MagicScepter           -[#000082,plain]-^  MagicalWeapon         
MagicalWeapon          -[#000082,plain]-^  WeaponTile            
ManaHandler            -[#000082,plain]-^  RessourceHandler      
ManaRing               -[#000082,plain]-^  AttackItem            
PhysicalWeapon         -[#000082,plain]-^  WeaponTile            
PlayerTile             -[#000082,plain]-^  CharacterTile         
RessourceHandler       -[#000082,plain]-^  AttackHandler         
Sword                  -[#000082,plain]-^  PhysicalWeapon        
TargetHandler          -[#000082,plain]-^  DamageHandler         
VigorHandler           -[#000082,plain]-^  RessourceHandler      
VigorRing              -[#000082,plain]-^  AttackItem            
WeaponTile             -[#000082,plain]-^  ItemTile              
@enduml
